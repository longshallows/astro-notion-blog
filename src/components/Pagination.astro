---
import { getPageLink } from '../lib/blog-helpers.ts'

export interface Props {
  basePath: string;
  currentPage: number
  numberOfPages: number
  tag: string
}

const { basePath, currentPage, numberOfPages, tag = '' } = Astro.props

const isFirstPage = currentPage === 1
const isLastPage = currentPage === numberOfPages

const startPage = currentPage - 2 < 1 ? 1 : currentPage - 2
const endPage =
  currentPage + 2 > numberOfPages ? numberOfPages : currentPage + 2

let pages = []
for (let i = startPage; i <= endPage; i++) {
  pages.push(i)
}
---

{numberOfPages > 1 && (
  <div class="pagination">
      {isFirstPage ? (
        <span class="inactive">&lt;&lt;</span>
      ) : (
        <a href={getPageLink(basePath, 1, tag)}>&lt;&lt;</a>
      )}

      {pages.map((p: number) =>
        p === currentPage ? (
          <span class="inactive">{p}</span>
        ) : (
          <a href={getPageLink(basePath, p, tag)}>{p}</a>
        )
      )}

      {isLastPage ? (
        <span class="inactive">&gt;&gt;</span>
      ) : (
        <a href={getPageLink(basePath, numberOfPages, tag)}>&gt;&gt;</a>
      )}
  </div>
)}

<style>
  .pagination {
    display: flex;
    width: 100%;
    margin: 0 auto;
    color: var(--fg);
    justify-content: center;
    align-items: center;
  }
  .pagination a,
  .pagination span {
    display: block;
    width: 2.4rem;
    height: 3rem;
    margin: 0 0.4rem;
    border-radius: var(--radius);
    background: #f4f4f4;
    color: inherit;
    font-size: 0.85rem;
    text-align: center;
    font-weight: 500;
    line-height: 3rem;
  }
  .pagination a {
    text-decoration: underline;
  }
  .pagination a:hover:not(.inactive) {
    background: #ddd;
  }
  .pagination .inactive {
    color: #999;
    text-decoration: none;
  }
</style>
