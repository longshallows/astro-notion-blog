---
import { ENABLE_LIGHTBOX, DATABASE_ID } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import '../styles/global.css'
import SearchModal from '../components/SearchModal.astro'
import SearchButton from '../components/SearchButton.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase(DATABASE_ID)
const gtmId = import.meta.env.PUBLIC_GTM_ID;

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/default-og-image.png'),
  Astro.site
)

let coverImageURL: string = ''
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch {
      console.log('Invalid DB cover image URL: ', database.Cover?.Url)
    }
  }
}

let customIconURL: string = ''
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch {
    console.log('Invalid DB custom icon URL: ', database.Icon?.Url)
  }
}
---
<!DOCTYPE html>
<html lang="ja" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <!-- Google Tag Manager -->
    {gtmId && (
    <script is:inline define:vars={{ gtmId }}>
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer',gtmId);
    </script>
  )}
    <!-- End Google Tag Manager -->
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <!-- Google Tag Manager (noscript) -->
    {gtmId && (
      <noscript><iframe src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}
      height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    )}
    <!-- End Google Tag Manager (noscript) -->

    <div class="container">
      <header>
        {
          coverImageURL && (
            <div class="cover">
              <img src={coverImageURL} alt="Site cover image" loading="lazy" />
            </div>
          )
        }
      </header>

      <div class="main-content-wrapper">
        <main>
          <div class="content">
            <header class="content-header">
              <h1>
                <a href={getNavLink('/')}>
                                    {
                    database.Icon && database.Icon.Type === 'emoji' ? (
                      <>
                        <span>{database.Icon.Emoji}</span>
                      </>
                    ) : database.Icon && database.Icon.Type === 'external' ? (
                      <>
                        <img src={database.Icon.Url} alt="Site icon image" />
                        {database.Title}
                      </>
                    ) : database.Icon && database.Icon.Type === 'file' ? (
                      <>
                        <img
                          src={customIconURL}
                          class="custom-icon"
                          alt="Site icon image"
                        />
                        {database.Title}
                      </>
                    ) : (
                      database.Title
                    )
                  }
                </a>
              </h1>
              <div class="description">{database.Description}</div>

              <button class="hamburger-menu" aria-label="Open Menu">
                <span></span>
                <span></span>
                <span></span>
              </button>
            </header>

            <slot name="main" />

            <footer>
              <div>
                <span>Powered byÂ </span>
                <a href="https://github.com/otoyo/astro-notion-blog">astro-notion-blog</a>
              </div>
            </footer>
          </div>
        </main>
      </div>

      <div class="sidebar-container">
        <div class="sidebar-overlay"></div>
        <aside>
          <SearchButton />
          <slot name="aside" />
        </aside>
      </div>
    </div>
    <SearchModal />
    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const hamburger = document.querySelector('.hamburger-menu');
        const sidebarContainer = document.querySelector('.sidebar-container');
        const overlay = document.querySelector('.sidebar-overlay');

        if (hamburger && sidebarContainer && overlay) {
          hamburger.addEventListener('click', () => {
            sidebarContainer.classList.toggle('is-open');
            document.body.classList.toggle('sidebar-is-open');
          });

          overlay.addEventListener('click', () => {
            sidebarContainer.classList.remove('is-open');
            document.body.classList.remove('sidebar-is-open');
          });
        }
      });
    </script>
    </body>
</html>

<style>
  .container {
    min-height: 100vh;
    margin: 0 auto;
    max-width: 1280px;
  }
  main {
    flex: 1;
    justify-content: space-between;
  }
    @media (max-width: 640px) {
    div.content {
      padding: 0 18px;
    }
  }


  main header h1 {
    font-weight: 700;
    color: #333;
  }
  main header h1 a {
    display: block;
    color: inherit;
  }
  main header h1 a:hover {
    color: inherit;
  }
  main header h1 a span,
  main header h1 a img {
    display: inline-block;
    font-size: 1.1em;
  }
  main header h1 a span {
    margin-right: 0.3em;
    margin-left: -0.1rem;
  }
  main header h1 a img {
    width: 1.2em;
    height: 1.2em;
    margin-right: 0.2em;
    margin-left: -0.3rem;
    vertical-align: sub;
  }
  main header h1 a img.custom-icon {
    border-radius: var(--radius);
  }

  main header div.description {
    padding: 0.3rem 0 0.6rem;
    font-size: 0.95rem;
  }

  div.cover img {
    display: block;
    width: 100%;
    height: 20vh;
    object-fit: cover;
  }
  div.content {
    padding: 20px;
  }
  main footer {
    margin: 30px 0 10px;
    text-align: center;
    font-size: 0.75rem;
  }
  .main-content-wrapper {
    display: flex;
    width: 100%;
  }
  .content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
    position: sticky;
    top: 0;
    background-color: var(--bg, white);
    z-index: 10;
  }
  .content-header h1 {
    margin: 0.5rem;
  }
  .content-header .description {
    display: none; /* Hide description in header to simplify layout */
  }

  /* Hamburger Menu Button */
  .hamburger-menu {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    width: 2rem;
    height: 2rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    z-index: 1001; /* Above overlay */
  }
  .hamburger-menu span {
    width: 2rem;
    height: 0.25rem;
    background: var(--fg);
    border-radius: 10px;
    transition: all 0.3s ease-in-out;
    position: relative;
    transform-origin: 1px;
  }
  .sidebar-is-open .hamburger-menu {
    display: none;
  }

  /* Sidebar Container */
  .sidebar-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allow clicks through when hidden */
    z-index: 1000;
  }
  .sidebar-container.is-open {
    pointer-events: auto; /* Enable clicks when open */
  }

  /* Sidebar Overlay */
  .sidebar-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  .sidebar-container.is-open .sidebar-overlay {
    opacity: 1;
  }

  /* Aside (The actual sidebar) */
  aside {
    position: absolute;
    top: 0;
    right: 0;
    width: 500px;
    height: 100%;
    padding: 20px;
    background-color: #f4f4f4;
    transform: translateX(100%);
    transition: transform 0.3s ease-in-out;
    overflow-y: auto;
  }
  .sidebar-container.is-open aside {
    transform: translateX(0);
    box-shadow: -5px 0 15px rgba(0,0,0,0.1);
  }

  @media (max-width: 640px) {
    div.content {
      padding: 0 18px;
    }
    aside {
      width: 80%; 
    }
  }
</style>

<style is:global>
  /* --- Your existing global styles --- */
  :root {
    --bg: #fff;
    --fg: #333;
    /* ... */
  }
  /* --- End of existing global styles --- */
</style>